// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"
)

// Helper_ is an autogenerated mock type for the Helpers_ type
type Helper_ struct {
	mock.Mock
}

// ExtractIDParam provides a mock function with given fields: c
func (_m *Helper_) ExtractIDParam(c echo.Context) (int, error) {
	ret := _m.Called(c)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context) (int, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) int); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExtractPageLimit provides a mock function with given fields: c
func (_m *Helper_) ExtractPageLimit(c echo.Context) (int, int, error) {
	ret := _m.Called(c)

	var r0 int
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(echo.Context) (int, int, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) int); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(echo.Context) int); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(echo.Context) error); ok {
		r2 = rf(c)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LimitOffsetConvert provides a mock function with given fields: page, limit
func (_m *Helper_) LimitOffsetConvert(page int, limit int) (int, int) {
	ret := _m.Called(page, limit)

	var r0 int
	var r1 int
	if rf, ok := ret.Get(0).(func(int, int) (int, int)); ok {
		return rf(page, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(page, limit)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(page, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

type mockConstructorTestingTNewHelper_ interface {
	mock.TestingT
	Cleanup(func())
}

// NewHelper_ creates a new instance of Helper_. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHelper_(t mockConstructorTestingTNewHelper_) *Helper_ {
	mock := &Helper_{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
