// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	users "alta-dashboard-be/features/users"

	mock "github.com/stretchr/testify/mock"
)

// UserData_ is an autogenerated mock type for the UserDataInterface_ type
type UserData_ struct {
	mock.Mock
}

// Delete provides a mock function with given fields: userId
func (_m *UserData_) Delete(userId uint) error {
	ret := _m.Called(userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: input
func (_m *UserData_) Insert(input users.UserEntity) (users.UserEntity, error) {
	ret := _m.Called(input)

	var r0 users.UserEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(users.UserEntity) (users.UserEntity, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(users.UserEntity) users.UserEntity); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(users.UserEntity)
	}

	if rf, ok := ret.Get(1).(func(users.UserEntity) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: email, password
func (_m *UserData_) Login(email string, password string) (users.UserEntity, string, error) {
	ret := _m.Called(email, password)

	var r0 users.UserEntity
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (users.UserEntity, string, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) users.UserEntity); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(users.UserEntity)
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(email, password)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SelectAll provides a mock function with given fields: limit, offset
func (_m *UserData_) SelectAll(limit int, offset int) (map[string]interface{}, error) {
	ret := _m.Called(limit, offset)

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (map[string]interface{}, error)); ok {
		return rf(limit, offset)
	}
	if rf, ok := ret.Get(0).(func(int, int) map[string]interface{}); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectData provides a mock function with given fields: userId
func (_m *UserData_) SelectData(userId uint) (users.UserEntity, error) {
	ret := _m.Called(userId)

	var r0 users.UserEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (users.UserEntity, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(uint) users.UserEntity); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(users.UserEntity)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateData provides a mock function with given fields: input
func (_m *UserData_) UpdateData(input users.UserEntity) (users.UserEntity, error) {
	ret := _m.Called(input)

	var r0 users.UserEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(users.UserEntity) (users.UserEntity, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(users.UserEntity) users.UserEntity); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(users.UserEntity)
	}

	if rf, ok := ret.Get(1).(func(users.UserEntity) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserData_ interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserData_ creates a new instance of UserData_. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserData_(t mockConstructorTestingTNewUserData_) *UserData_ {
	mock := &UserData_{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
