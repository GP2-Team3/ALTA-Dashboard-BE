// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	logs "alta-dashboard-be/features/logs"

	mock "github.com/stretchr/testify/mock"
)

// LogData_ is an autogenerated mock type for the LogDataInterface_ type
type LogData_ struct {
	mock.Mock
}

// Insert provides a mock function with given fields: input
func (_m *LogData_) Insert(input logs.LogEntity) (logs.LogEntity, error) {
	ret := _m.Called(input)

	var r0 logs.LogEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(logs.LogEntity) (logs.LogEntity, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(logs.LogEntity) logs.LogEntity); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(logs.LogEntity)
	}

	if rf, ok := ret.Get(1).(func(logs.LogEntity) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectData provides a mock function with given fields: searchedMenteeId, limit, offset
func (_m *LogData_) SelectData(searchedMenteeId uint, limit int, offset int) (map[string]interface{}, error) {
	ret := _m.Called(searchedMenteeId, limit, offset)

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, int, int) (map[string]interface{}, error)); ok {
		return rf(searchedMenteeId, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int) map[string]interface{}); ok {
		r0 = rf(searchedMenteeId, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int) error); ok {
		r1 = rf(searchedMenteeId, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewLogData_ interface {
	mock.TestingT
	Cleanup(func())
}

// NewLogData_ creates a new instance of LogData_. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLogData_(t mockConstructorTestingTNewLogData_) *LogData_ {
	mock := &LogData_{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
