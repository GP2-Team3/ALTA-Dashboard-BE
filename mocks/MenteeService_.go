// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mentee "alta-dashboard-be/features/mentee"

	mock "github.com/stretchr/testify/mock"
)

// MenteeService_ is an autogenerated mock type for the MenteeService_ type
type MenteeService_ struct {
	mock.Mock
}

// Create provides a mock function with given fields: userID, _a1
func (_m *MenteeService_) Create(userID int, _a1 mentee.MenteeCore) error {
	ret := _m.Called(userID, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, mentee.MenteeCore) error); ok {
		r0 = rf(userID, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: userID, id
func (_m *MenteeService_) Delete(userID int, id int) error {
	ret := _m.Called(userID, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userID, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: page, limit, status
func (_m *MenteeService_) GetAll(page int, limit int, status string) ([]mentee.MenteeCore, error) {
	ret := _m.Called(page, limit, status)

	var r0 []mentee.MenteeCore
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]mentee.MenteeCore, error)); ok {
		return rf(page, limit, status)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []mentee.MenteeCore); ok {
		r0 = rf(page, limit, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mentee.MenteeCore)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) error); ok {
		r1 = rf(page, limit, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOne provides a mock function with given fields: id
func (_m *MenteeService_) GetOne(id int) (mentee.MenteeCore, error) {
	ret := _m.Called(id)

	var r0 mentee.MenteeCore
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (mentee.MenteeCore, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) mentee.MenteeCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(mentee.MenteeCore)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: userID, id, _a2
func (_m *MenteeService_) Update(userID int, id int, _a2 mentee.MenteeCore) error {
	ret := _m.Called(userID, id, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, mentee.MenteeCore) error); ok {
		r0 = rf(userID, id, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMenteeService_ interface {
	mock.TestingT
	Cleanup(func())
}

// NewMenteeService_ creates a new instance of MenteeService_. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMenteeService_(t mockConstructorTestingTNewMenteeService_) *MenteeService_ {
	mock := &MenteeService_{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
