// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"
)

// UserDelivery_ is an autogenerated mock type for the UserDeliveryInterface_ type
type UserDelivery_ struct {
	mock.Mock
}

// GetAllUser provides a mock function with given fields: c
func (_m *UserDelivery_) GetAllUser(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserData provides a mock function with given fields: c
func (_m *UserDelivery_) GetUserData(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: c
func (_m *UserDelivery_) Login(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: c
func (_m *UserDelivery_) Register(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveAccount provides a mock function with given fields: c
func (_m *UserDelivery_) RemoveAccount(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccount provides a mock function with given fields: c
func (_m *UserDelivery_) UpdateAccount(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserDelivery_ interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserDelivery_ creates a new instance of UserDelivery_. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserDelivery_(t mockConstructorTestingTNewUserDelivery_) *UserDelivery_ {
	mock := &UserDelivery_{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
