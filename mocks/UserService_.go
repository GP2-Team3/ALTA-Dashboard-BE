// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	users "alta-dashboard-be/features/users"

	mock "github.com/stretchr/testify/mock"
)

// UserService_ is an autogenerated mock type for the UserServiceInterface_ type
type UserService_ struct {
	mock.Mock
}

// Create provides a mock function with given fields: input, loggedInUserRole
func (_m *UserService_) Create(input users.UserEntity, loggedInUserRole string) (users.UserEntity, error) {
	ret := _m.Called(input, loggedInUserRole)

	var r0 users.UserEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(users.UserEntity, string) (users.UserEntity, error)); ok {
		return rf(input, loggedInUserRole)
	}
	if rf, ok := ret.Get(0).(func(users.UserEntity, string) users.UserEntity); ok {
		r0 = rf(input, loggedInUserRole)
	} else {
		r0 = ret.Get(0).(users.UserEntity)
	}

	if rf, ok := ret.Get(1).(func(users.UserEntity, string) error); ok {
		r1 = rf(input, loggedInUserRole)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: limit, offset
func (_m *UserService_) GetAll(limit int, offset int) (map[string]interface{}, error) {
	ret := _m.Called(limit, offset)

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (map[string]interface{}, error)); ok {
		return rf(limit, offset)
	}
	if rf, ok := ret.Get(0).(func(int, int) map[string]interface{}); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetData provides a mock function with given fields: loggedInUserId, userId, loggedInUserRole
func (_m *UserService_) GetData(loggedInUserId uint, userId uint, loggedInUserRole string) (users.UserEntity, error) {
	ret := _m.Called(loggedInUserId, userId, loggedInUserRole)

	var r0 users.UserEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, string) (users.UserEntity, error)); ok {
		return rf(loggedInUserId, userId, loggedInUserRole)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, string) users.UserEntity); ok {
		r0 = rf(loggedInUserId, userId, loggedInUserRole)
	} else {
		r0 = ret.Get(0).(users.UserEntity)
	}

	if rf, ok := ret.Get(1).(func(uint, uint, string) error); ok {
		r1 = rf(loggedInUserId, userId, loggedInUserRole)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: email, password
func (_m *UserService_) Login(email string, password string) (users.UserEntity, string, error) {
	ret := _m.Called(email, password)

	var r0 users.UserEntity
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (users.UserEntity, string, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) users.UserEntity); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(users.UserEntity)
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(email, password)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ModifyData provides a mock function with given fields: loggedInUserId, userId, loggedInUserRole, input
func (_m *UserService_) ModifyData(loggedInUserId uint, userId uint, loggedInUserRole string, input users.UserEntity) (users.UserEntity, error) {
	ret := _m.Called(loggedInUserId, userId, loggedInUserRole, input)

	var r0 users.UserEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, string, users.UserEntity) (users.UserEntity, error)); ok {
		return rf(loggedInUserId, userId, loggedInUserRole, input)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, string, users.UserEntity) users.UserEntity); ok {
		r0 = rf(loggedInUserId, userId, loggedInUserRole, input)
	} else {
		r0 = ret.Get(0).(users.UserEntity)
	}

	if rf, ok := ret.Get(1).(func(uint, uint, string, users.UserEntity) error); ok {
		r1 = rf(loggedInUserId, userId, loggedInUserRole, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: loggedInUserId, userId, loggedInUserRole
func (_m *UserService_) Remove(loggedInUserId uint, userId uint, loggedInUserRole string) error {
	ret := _m.Called(loggedInUserId, userId, loggedInUserRole)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint, string) error); ok {
		r0 = rf(loggedInUserId, userId, loggedInUserRole)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserService_ interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService_ creates a new instance of UserService_. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService_(t mockConstructorTestingTNewUserService_) *UserService_ {
	mock := &UserService_{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
