openapi: '3.0.2'
info:
  title: Immersive Dashboard App API
  version: 1.0.0
servers:
  - url: http://104.198.56.90
paths:
  /users:
    get:
      tags:
        - Users
      summary: get all users
      description: Get all users data
      parameters:
        - name: "page"
          in: query
          schema:
            type: integer
            example: 1
        - name: limit
          description: "Limit data per page"
          in: query
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: Succress reponse with return of list of user datas
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "succesfully read user data"
                  data:
                    total_page: 2
                    page: 1
                    data:
                      - id: 1
                        name: "Admin"
                        email: "Admin@gmail.com"
                        team: "Mentor"
                        role: "Admin"
                        status: "Active"
                      - id: 2
                        name: "User"
                        email: "User@gmail.com"
                        team: "Mentor"
                        role: "User"
                        status: "Active"
        '500':
          $ref: '#/components/responses/500'

    post:
      tags:
        - Users
      security:
        - JWTAuth: []
      summary: add user
      description: Register user
      parameters:
        - name: "full_name"
          description: "User's full name"
          required: true
          in: query
          schema:
            type: string
            example: "Joko"
        - name: email
          description: "User's email"
          required: true
          in: query
          schema:
            type: string
            example: "Joko@gmail.com"
        - name: password
          description: "User's account password"
          required: true
          in: query
          schema:
            type: string
            example: "qwerty"
        - name: team
          description: "User's account in Alterra"
          required: false
          in: query
          schema:
            type: string
            example: "Mentor"
        - name: role
          description: "User's account role"
          required: false
          in: query
          schema:
            type: string
            example: "User"
        - name: status
          description: "User's account status"
          required: false
          in: query
          schema:
            type: string
            example: "Active"
      requestBody:
        required: true
        content:
          application/form-data:
            schema:
              type: object
              example:
                name: "Joko"
                email: "Joko@gmail.com"
                password: "qwerty"

      responses:
        '201':
          description: Success response with return of inserted data
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "succesfully insert user data"
                  data: 
                    - id: 1
                      name: "Joko"
                      email: "Joko@gmail.com"
                      team: "Mentor"
                      role: "User"
                      status: "Active"
                  
        '400':
          $ref: '#/components/responses/400'
          
        '500':
          $ref: '#/components/responses/500'

  /users/login:
    post:
      tags:
        - Users
      summary: login
      description: Login with email and password
      parameters:
        - name: email
          description: "User's email"
          required: true
          in: query
          schema:
            type: string
            example: "Joko@gmail.com"
        - name: password
          description: "User's account password"
          required: true
          in: query
          schema:
            type: string
            example: "qwerty"
        
      requestBody:
        required: true
        content:
          application/form-data:
            schema:
              type: object
              example:
                email: "Joko@gmail.com"
                password: "qwerty"

      responses:
        '200':
          description: Success response with return of user data and generated token
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "login succeed"
                  data:
                    token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2NzgwNjU5NDAsInJvbGUiOiJVc2VyIiwidXNlcklkIjoxfQ.MKTdYMbY6awM0s8_A3fauSV2RjuTBaohfTslkZ0UkWk"
                    data:
                      - id: 1
                        name: "Joko"
                        email: "Joko@gmail.com"
                        team: "Admission"
                        role: "Admin"
                        status: "Active"

        '400':
          $ref: '#/components/responses/400'

        '404':
          $ref: '#/components/responses/404'

        '500':
          $ref: '#/components/responses/500'

  /users/{user_id}:
    get:
      tags:
        - Users
      summary: get user
      description: Get user's data by id
      security:
        - JWTAuth: []
      parameters:
        - name: user_id
          description: "User's id of the user you want to search for"
          required: true
          in: path
          schema:
            type: integer
            example: 1

      responses:
        '200':
          description: Success response with return of an user data
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "succesfully read user data"
                  data:
                    - id: 1
                      name: "Joko"
                      email: "Joko@gmail.com"
                      team: "Mentor"
                      role: "User"
                      status: "Active"

        '400':
          $ref: '#/components/responses/400'

        '404':
          $ref: '#/components/responses/404'

    put:
      tags:
        - Users
      summary: update user by id
      description: Update user's data by id
      security:
        - JWTAuth: []
      parameters:
        - name: user_id
          description: "User's id of the user you want to search for"
          required: true
          in: path
          schema:
            type: integer
            example: 1
        - name: "full_name"
          description: "User's full name"
          required: true
          in: query
          schema:
            type: string
            example: "Joko"
        - name: email
          description: "User's email"
          required: true
          in: query
          schema:
            type: string
            example: "Joko@gmail.com"
        - name: password
          description: "User's account password"
          required: true
          in: query
          schema:
            type: string
            example: "qwerty"
        - name: team
          description: "User's account in Alterra"
          required: false
          in: query
          schema:
            type: string
            example: "Mentor"
        - name: role
          description: "User's account role"
          required: false
          in: query
          schema:
            type: string
            example: "User"
        - name: status
          description: "User's account status"
          required: false
          in: query
          schema:
            type: string
            example: "Active"
      requestBody:
        required: true
        content:
          application/form-data:
            schema:
              type: object
              example:
                name: "Joko"
                email: "Joko@gmail.com"
                team: "Admission"
                role: "Admin"
                status: "Active"

      responses:
        '204':
          description: Success response with return of updated data
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "succesfully update user data"
                  data:
                  - id: 1
                    name: "Joko"
                    email: "Joko@gmail.com"
                    team: "Admission"
                    role: "Admin"
                    status: "Active"

        '400':
          $ref: '#/components/responses/400'

        '404':
          $ref: '#/components/responses/404'

        '500':
          $ref: '#/components/responses/500'

    delete:
      tags:
        - Users
      summary: delete user
      description: Delete user by id
      security:
        - JWTAuth: []
      parameters:
        - name: user_id
          description: "User's id of the user you want to delete for"
          required: true
          in: path
          schema:
            type: integer
            example: 1

      responses:
        '200':
          description: Success response for deleting user
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "succesfully delete user"

        '400':
          $ref: '#/components/responses/400'

        '404':
          $ref: '#/components/responses/404'

        '500':
          $ref: '#/components/responses/500'

  /logs:
    post:
      tags:
        - Logs
      summary: add logs
      description: Create new logs
      security:
        - JWTAuth: []
      parameters:
        - name: title
          description: "Log's title"
          required: true
          in: query
          schema:
            type: integer
            example: "Lorem Ipsum"
        - name: status
          description: "Mentee's status change logs"
          required: true
          in: query
          schema:
            type: integer
            example: "Join Class"
        - name: feedback
          description: "Mentee's feedback logs"
          required: true
          in: query
          schema:
            type: string
            example: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum."
        - name: mentee_id
          description: "Mentee's id you want to assigned for"
          required: true
          in: query
          schema:
            type: integer
            example: 1
            
      requestBody:
        required: true
        content:
          application/form-data:
            schema:
              type: object
              example:
                title: "Lorem Ipsum"
                status: "Join Class"
                feedback: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum."
                mentee_id: 1

      responses:
        '204':
          description: Success response with return of inserted data
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "succesfully insert log data"
                  data:
                  - id: 1
                    title: "Lorem Ipsum"
                    status: "Join Class"
                    feedback: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum."
                    user_id: 1
                    mentee_id: 1

        '500':
          $ref: '#/components/responses/500'
  /classses/{id}:
    delete:
        tags:
          - Classes
        summary: 'delete class by id'
        security:
          - JWTAuth: []
        parameters:
         - in: path
           name: id
           schema:
             type: integer
           description: 'the id of class'
           required: true
        responses:
         '200':
           description: 'success delete class'
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/ResponseWithoutData'
         '400':
           $ref: '#/components/responses/400'
  
         '404':
           $ref: '#/components/responses/404'
  
         '500':
           $ref: '#/components/responses/500'
    put:
      tags:
        - Classes
      summary: 'update class by id'
      security:
        - JWTAuth: []
      parameters:
       - in: path
         name: id
         schema:
           type: integer
         description: 'the id of class'
         required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClassRequest'
      responses:
       '200':
         description: 'success get one class'
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/ResponseWithoutData'
       '400':
         $ref: '#/components/responses/400'

       '404':
         $ref: '#/components/responses/404'

       '500':
         $ref: '#/components/responses/500'
    get:
      tags:
        - Classes
      summary: 'get one class by id'
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: 'the id of class'
          required: true
      responses:
        '200':
          description: 'success get one class'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassResponse'
        '400':
          $ref: '#/components/responses/400'

        '404':
          $ref: '#/components/responses/404'

        '500':
          $ref: '#/components/responses/500'
  /classes:
    post:
      tags:
        - Classes
      summary: 'create a new class'
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClassRequest'
      responses:
        '200':
          description: 'success create new class'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithoutData'
        '400':
          $ref: '#/components/responses/400'

        '404':
          $ref: '#/components/responses/404'

        '500':
          $ref: '#/components/responses/500'
    get:
      tags:
        - Classes
      summary: 'get all classes'
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: 'which page is heading'
          required: true
        - in: query
          name: limit
          schema:
            type: integer
          description: 'how many items per page'
          required: true
      responses:
        "200":
          description: "success retrieve all data"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassResponseList'
        '400':
          $ref: '#/components/responses/400'

        '404':
          $ref: '#/components/responses/404'

        '500':
          $ref: '#/components/responses/500'
          
  /mentees/{id}:
    delete:
        tags:
          - Mentees
        summary: 'delete mentee by id'
        security:
          - JWTAuth: []
        parameters:
         - in: path
           name: id
           schema:
             type: integer
           description: 'the id of mentee'
           required: true
        responses:
         '200':
           description: 'success delete mentee'
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/ResponseWithoutData'
         '400':
           $ref: '#/components/responses/400'
  
         '404':
           $ref: '#/components/responses/404'
  
         '500':
           $ref: '#/components/responses/500'
    put:
      tags:
        - Mentees
      summary: 'update mentee by id'
      security:
        - JWTAuth: []
      parameters:
       - in: path
         name: id
         schema:
           type: integer
         description: 'the id of mentee'
         required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenteeRequest'
      responses:
       '200':
         description: 'success get one mentee'
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/ResponseWithoutData'
       '400':
         $ref: '#/components/responses/400'

       '404':
         $ref: '#/components/responses/404'

       '500':
         $ref: '#/components/responses/500'
    get:
      tags:
        - Mentees
      summary: 'get one mentee by id'
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: 'the id of mentee'
          required: true
      responses:
        '200':
          description: 'success get one mentee'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenteeResponse'
        '400':
          $ref: '#/components/responses/400'

        '404':
          $ref: '#/components/responses/404'

        '500':
          $ref: '#/components/responses/500'
  /mentees:
    post:
      tags:
        - Mentees
      summary: 'create a new mentee'
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenteeRequest'
      responses:
        '200':
          description: 'success create new mentee'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithoutData'
        '400':
          $ref: '#/components/responses/400'

        '404':
          $ref: '#/components/responses/404'

        '500':
          $ref: '#/components/responses/500'
    get:
      tags:
        - Mentees
      summary: 'get all mentees'
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: 'which page is heading'
          required: true
        - in: query
          name: limit
          schema:
            type: integer
          description: 'how many items per page'
          required: true
      responses:
        "200":
          description: "success retrieve all data"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenteeResponseList'
        '400':
          $ref: '#/components/responses/400'

        '404':
          $ref: '#/components/responses/404'

        '500':
          $ref: '#/components/responses/500'
    
####################################
#  COMPONENTS
####################################
components:
  securitySchemes:
      JWTAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT
        description: "JWT Token"
  requestBodies:
    Class:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClassRequest'
    Mentee:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MenteeRequest'
  schemas:
    ClassRequest:
      type: object
      properties:
        name:
          type: string
          example: Immersive Backend Batch 15
        short_name:
          type: string
          example: BE 15
        start_date:
          type: string
          format: date
          example: 2023-3-22
        end_date:
          type: string
          format: date
          example: 2023-6-22
      required:
        - name
        - short_name
        - start_date
        - end_date
    ClassResponseList:
      type: object
      properties:
        status:
          type: string
          example: 'success'
        message:
          type: string
          example: 'any message'
        data:
          $ref: '#/components/schemas/ClassResponseListData'
    ClassResponse:
      type: object
      properties:
        status:
          type: string
          example: 'success'
        message:
          type: string
          example: 'any message'
        data:
          $ref: '#/components/schemas/ClassResponseData'
    ClassResponseListData:
      type: array
      items:
        $ref: '#/components/schemas/ClassResponseData'
    ClassResponseData:
      type: object
      properties:
        id:
          type: integer
          example: 1
        created_at:
          type: string
          format: date
          example: 2023-01-22
        name:
          type: string
          example: Immersive Backend Batch 15
        short_name:
          type: string
          example: BE 15
        start_date:
          type: string
          format: date
          example: 2023-3-22
        end_date:
          type: string
          format: date
          example: 2023-6-22
        user_id:
          type: integer
          example: 2
    MenteeRequest:
      type: object
      properties:
        full_name:
          type : string
          example: ahmad
        email:
          type: string
          format: email
          example: ahmad@ahmad.com
        address:
          type: string
          example: 'jl batu no 12'
        phone:
          type: string
          example: '081245780213'
        telegram:
          type: string
          example: itsahmad
        emergency_name:
          type: string
          example: abdul
        emergency_phone:
          type: string
          example: '087654321087'
        emergency_status:
          type: string
          example: keponakan
        education_type:
          type: string
          enum: [IT, NON-IT]
          example: IT
        education_major:
          type: string
          example: electrical engineering
        education_grad_date:
          type: string
          format: date
          example: 2023-01-22
      required:
        - full_name
        - email
        - address
        - phone
        - telegram
        - emergency_name
        - emergency_status
        - emergency_phone
        - education_type
        - education_major
    MenteeResponseList:
      type: object
      properties:
        status:
          type: string
          example: 'success'
        message:
          type: string
          example: 'any message'
        data:
          $ref: '#/components/schemas/MenteeResponseListData'
    MenteeResponse:
      type: object
      properties:
        status:
          type: string
          example: 'success'
        message:
          type: string
          example: 'any message'
        data:
          $ref: '#/components/schemas/MenteeResponseData'
    MenteeResponseListData:
      type: array
      items:
        $ref: '#/components/schemas/MenteeResponseData'
    MenteeResponseData:
      type: object
      properties:
        id:
          type: integer
          example: 1
        created_at:
          type: string
          format: date
          example: 2006-01-20
        full_name:
          type : string
          example: ahmad
        email:
          type: string
          format: email
          example: ahmad@ahmad.com
        address:
          type: string
          example: 'jl batu no 12'
        phone:
          type: string
          example: '081245780213'
        telegram:
          type: string
          example: itsahmad
        emergency_name:
          type: string
          example: abdul
        emergency_phone:
          type: string
          example: '087654321087'
        emergency_status:
          type: string
          example: keponakan
        education_type:
          type: string
          enum: [IT, NON-IT]
          example: IT
        education_major:
          type: string
          example: electrical engineering
        education_grad_date:
          type: string
          format: date
          example: 2023-01-22
    User:
      type: object
      properties:
        id:
          type: integer
          format: uint
        full_name:
          type: string
        email:
          type: string
        password:
          type: string
        team:
          type: string
          enum:
            - Mentor
            - Placement
            - People
            - Admission
            - Academic
        role:
          type: string
          enum:
            - User
            - Admin
        status:
          type: string
          enum:
            - 'Active'
            - 'Not-Active'
            - 'Deleted'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Log:
      type: object
      properties:
        id:
          type: integer
          format: uint
        title:
          type: string
        status:
          type: string
          enum:
            - None
            - Join Class
            - Continue Section 2
            - Continue Section 3
        feedback:
          type: string
        user_id:
          type: integer
        mentee_id:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ResponseWithData:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        data:
          type: array
          
    ResponseWithoutData:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
          
  responses:
    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/ResponseWithoutData'
          example:
            status: "failed"
            message: "{{any message}}"

    '404':
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/ResponseWithoutData'
          example:
            status: "success"
            message: "{{any message}}"

    '500':
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/ResponseWithoutData'
          example:
            status: "failed"
            message: "{{any message}}"